{"version":3,"file":"ark-forms.cjs.production.min.js","sources":["../src/fieldReducer.ts","../src/formReducer.ts","../src/FormContext.ts","../src/ArkField.tsx","../src/ArkForm.tsx"],"sourcesContent":["import { FieldAction, FieldState, DeepPartial } from './types';\n\nexport const defaultFieldState: Omit<FieldState, 'configuration'> = {\n  changed: 0,\n  blurred: false,\n  dirty: false,\n  pristine: true,\n  filled: false,\n  value: '',\n  validity: {\n    valid: false,\n  },\n};\n\nconst handleChange = (state: FieldState, action: FieldAction): FieldState => {\n  const newState: FieldState = { ...state, changed: state.changed + 1, value: action.value!, filled: !!action.value };\n  const validateOnChange = action.configuration?.validateOnChange ?? state.configuration.validateOnChange;\n  const validate = action.configuration?.validate ?? state.configuration.validate;\n  if (validateOnChange) {\n    newState.dirty = true;\n    newState.pristine = false;\n    newState.validity = validate(action.value);\n  }\n  return newState;\n};\n\nconst handleBlur = (state: FieldState, action: FieldAction): FieldState => {\n  const validateOnBlur = action.configuration?.validateOnBlur ?? state.configuration.validateOnBlur;\n  const validate = action.configuration?.validate ?? state.configuration.validate;\n  if (!validateOnBlur || state.changed === 0) return { ...state, blurred: true };\n  const validity = validate(state.value);\n  return { ...state, dirty: true, pristine: false, blurred: true, validity };\n};\n\nconst setDirty = (state: FieldState): FieldState => {\n  return { ...state, dirty: true, pristine: false };\n};\n\nconst handleValidation = (state: FieldState, action: FieldAction): FieldState => {\n  const validate = action.configuration?.validate ?? state.configuration.validate;\n  const validity = validate(state.value);\n  return { ...state, validity };\n};\n\nexport const mergeState = (prevState: FieldState, newState: DeepPartial<FieldState>): FieldState => {\n  const result: Omit<FieldState, 'configuration' | 'validity'> = { ...prevState, ...newState };\n  return {\n    ...result,\n    configuration: { ...prevState.configuration, ...newState.configuration },\n    validity: { ...prevState.validity, ...newState.validity },\n  };\n};\n\nexport const fieldReducer = (state: FieldState, action: FieldAction) => {\n  switch (action.type) {\n    case 'change':\n      return handleChange(state, action);\n    case 'blur':\n      return handleBlur(state, action);\n    case 'dirty':\n      return setDirty(state);\n    case 'validate':\n      return handleValidation(state, action);\n    default:\n      throw new Error('Invalid action type');\n  }\n};\n","import { FormState, FormAction, FieldState } from './types';\nimport { fieldReducer } from './fieldReducer';\n\nexport const defaultFormState: FormState = {\n  dirty: false,\n  pristine: true,\n  invalid: true,\n  valid: false,\n  submitted: false,\n  changed: false,\n  blurred: 0,\n  fieldsData: new Map<string, FieldState>(),\n  configuration: {\n    name: '',\n    validateOnBlur: true,\n    validateOnChange: false,\n  },\n};\n\nconst handleSubmit = (state: FormState): FormState => {\n  return { ...state, ...handleValidation(state), submitted: true };\n};\n\nconst setFieldsDirty = (fieldsData: Map<string, FieldState>) => {\n  fieldsData.forEach((fieldState, fieldName) => {\n    if (fieldState.changed && !fieldState.dirty && !fieldState.configuration.validateOnChange) {\n      fieldsData.set(fieldName, fieldReducer(fieldReducer(fieldState, { type: 'dirty' }), { type: 'validate' }));\n    }\n  });\n};\n\nconst handleBlur = (state: FormState, action: FormAction): FormState => {\n  let newState: FormState = { ...state, blurred: state.blurred + 1 };\n  const fieldState = action.fieldState!;\n  newState.fieldsData.set(fieldState.configuration.name, fieldState);\n  if (!state.configuration.validateOnBlur || !state.changed) return newState;\n  newState.dirty = true;\n  newState.pristine = false;\n  setFieldsDirty(newState.fieldsData);\n  newState = handleValidation(newState);\n  return newState;\n};\n\nconst handleChange = (state: FormState, action: FormAction): FormState => {\n  let newState: FormState = { ...state, changed: true };\n  const fieldState = action.fieldState!;\n  newState.fieldsData.set(fieldState.configuration.name, fieldState);\n  if (state.configuration.validateOnChange) {\n    newState.dirty = true;\n    newState.pristine = false;\n    newState = handleValidation(newState);\n  }\n  return newState;\n};\n\nconst handleValidation = (state: FormState): FormState => {\n  const valid = isValid(state.fieldsData);\n  return { ...state, invalid: !valid, valid: valid };\n};\n\nconst registerField = (state: FormState, action: FormAction): FormState => {\n  state.fieldsData = new Map<string, FieldState>(state.fieldsData);\n  const fieldState = action.fieldState!;\n  state.fieldsData.set(fieldState.configuration.name, fieldState);\n  return handleValidation(state);\n};\nconst setField = (state: FormState, action: FormAction): FormState => {\n  const fieldState = action.fieldState!;\n  state.fieldsData.set(fieldState.configuration.name, fieldState);\n  return handleValidation(state);\n};\nconst unregisterField = (state: FormState, action: FormAction): FormState => {\n  state.fieldsData = new Map<string, FieldState>(state.fieldsData);\n  state.fieldsData.delete(action.fieldState!.configuration.name);\n  return handleValidation(state);\n};\n\nconst isValid = (fieldsData: Map<string, FieldState>) => {\n  if (!fieldsData) return false;\n  for (const [, fieldState] of fieldsData) {\n    if (!fieldState.validity.valid) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const formReducer = (state: FormState, action: FormAction) => {\n  switch (action.type) {\n    case 'submit':\n      return handleSubmit(state);\n    case 'change':\n      return handleChange(state, action);\n    case 'blur':\n      return handleBlur(state, action);\n    case 'validate':\n      return handleValidation(state);\n    case 'registerField':\n      return registerField(state, action);\n    case 'setField':\n      return setField(state, action);\n    case 'unregisterField':\n      return unregisterField(state, action);\n    default:\n      throw new Error();\n  }\n};\n","import { createContext, useContext } from 'react';\nimport { FormContextInterface } from './types';\nimport { defaultFormState } from './formReducer';\n\nexport const FormContext = createContext<FormContextInterface>({\n  state: defaultFormState,\n  setFieldState: () => void 0,\n  setFieldValue: () => void 0,\n  dispatch: () => void 0,\n});\n\nexport const FormProvider = FormContext.Provider;\nexport const FormConsumer = FormContext.Consumer;\n\nFormContext.displayName = 'FormContext';\n\nexport function useFormContext(): FormContextInterface {\n  return useContext<FormContextInterface>(FormContext);\n}\n\nexport default FormContext;\n","import React, { useRef, useEffect, useMemo } from 'react';\nimport { ValidityStateInterface, FieldInterface, FormContextInterface, FormConfiguration, FieldState } from './types';\nimport { useFormContext } from './FormContext';\nimport { fieldReducer, defaultFieldState } from './fieldReducer';\n\nexport const ArkField = <ET extends HTMLElement & { value: string } = HTMLInputElement>(\n  props: FieldInterface<ET>\n): JSX.Element => {\n  const formContext = useFormContext();\n  const formState = formContext.state;\n  const fieldState = formState.fieldsData.get(props.name) ?? initializeFieldState(props, formState.configuration);\n\n  return useMemo(\n    () => <_ArkField {...props} formContext={formContext} state={fieldState}></_ArkField>,\n    [\n      // list all state props manually, since form context generates new state obj each time(immutable)\n      formState.blurred, // blurred - used to signal when using autocomplete(fill-up) on entire form with validateOnChange=false\n      formState.submitted,\n      formState.valid,\n      formState.dirty,\n      formState.changed,\n      formState.fieldsData,\n      // <Field> must only concern about its initialValue, validate props change,\n      // there's no value in changing other 'configurational' props and event handlers, such as 'name', 'validateOnChange', etc...\n      props.initialValue,\n      props.validate,\n      //\n      fieldState?.changed,\n      fieldState?.validity,\n      fieldState?.blurred,\n      fieldState?.dirty,\n      fieldState?.pristine,\n      fieldState?.filled,\n    ]\n  );\n};\n\ntype _FieldInterface<ET> = FieldInterface<ET> & {\n  formContext: FormContextInterface;\n  state: FieldState;\n};\n\nconst defaultValidity: ValidityStateInterface = {\n  valid: true,\n};\n\nconst getValidity = () => defaultValidity;\n\nconst initializeFieldState = <ET extends HTMLElement & { value: string } = HTMLInputElement>(\n  fieldProps: FieldInterface<ET>,\n  formConfiguration: FormConfiguration\n): FieldState => {\n  const value = fieldProps.initialValue?.toString() ?? '';\n  const newState: FieldState = {\n    ...defaultFieldState,\n    value,\n    filled: !!value,\n    configuration: {\n      validateOnChange: fieldProps.validateOnChange ?? formConfiguration.validateOnChange ?? true,\n      validateOnBlur: formConfiguration.validateOnBlur ?? false,\n      validate: fieldProps.validate ?? getValidity,\n      name: fieldProps.name,\n    },\n  };\n  return newState;\n};\n\nconst _ArkField = <ET extends HTMLElement & { value: string } = HTMLInputElement>(\n  props: _FieldInterface<ET>\n): JSX.Element => {\n  const {\n    initialValue,\n    onChange = () => void 0,\n    onFocus = () => void 0,\n    onBlur = () => void 0,\n    children,\n    formContext,\n    state,\n  }: _FieldInterface<ET> = props;\n  const { dispatch } = formContext;\n\n  const inputRef = useRef<ET>();\n  const didMountRef = useRef(false);\n\n  useEffect(() => {\n    if (!didMountRef.current) return;\n    const _initialValue = initialValue?.toString() ?? '';\n    dispatch({\n      type: 'change',\n      fieldState: fieldReducer(state, {\n        value: _initialValue,\n        type: 'change',\n        configuration: { validateOnChange: true },\n      }),\n    });\n  }, [initialValue]);\n\n  useEffect(() => {\n    // must be in  the latest effect\n    didMountRef.current = true;\n    dispatch({\n      type: 'registerField',\n      fieldState: fieldReducer(state, { type: 'validate' }),\n    });\n    return () => {\n      dispatch({\n        type: 'unregisterField',\n        fieldState: state,\n      });\n    };\n  }, []);\n\n  const _onChange = (event: React.ChangeEvent<ET>) => {\n    const value = inputRef.current!.value;\n    dispatch({\n      type: 'change',\n      fieldState: fieldReducer(state, { value: value, type: 'change' }),\n    });\n    onChange(event, value);\n  };\n  const _onBlur = (event: React.SyntheticEvent<ET>) => {\n    onBlur(event);\n    dispatch({\n      type: 'blur',\n      fieldState: fieldReducer(state, { type: 'blur' }),\n    });\n  };\n  const _onFocus = (event: React.FocusEvent<ET>) => {\n    onFocus(event);\n  };\n\n  const fieldProps = {\n    value: state.value,\n    ref: inputRef,\n    onChange: _onChange,\n    onBlur: _onBlur,\n    onFocus: _onFocus,\n  };\n  // if (process.env.NODE_ENV !== 'production') {\n  //    console.log('field', name, value, fieldState, formState);\n  // }\n\n  return children({\n    fieldProps,\n    fieldState: state,\n    formContext,\n  });\n};\n","import React, { useReducer } from 'react';\nimport { FormConfiguration, FormContextInterface, FieldState, DeepPartial, FieldConfiguration } from './types';\nimport { FormProvider } from './FormContext';\nimport { fieldReducer, mergeState } from './fieldReducer';\nimport { formReducer, defaultFormState } from './formReducer';\n\ninterface FormProps {\n  name: string;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  onChange?: (event: React.FormEvent<HTMLFormElement>) => void;\n  onBlur?: (event: React.FormEvent<HTMLFormElement>) => void;\n}\nexport interface FormInterface extends FormConfiguration {\n  name: string;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>, data: Map<string, FieldState>) => void;\n  onChange?: (event: React.FormEvent<HTMLFormElement>, data: Map<string, FieldState>) => void;\n  onBlur?: (event: React.FormEvent<HTMLFormElement>, data: Map<string, FieldState>) => void;\n  children: (\n    props: FormContextInterface & {\n      formProps: FormProps;\n    }\n  ) => React.ReactChild | React.ReactChild[];\n}\n\nexport const ArkForm = ({\n  name,\n  onSubmit,\n  children,\n  validateOnChange = false,\n  validateOnBlur = true,\n}: FormInterface): JSX.Element => {\n  const [state, dispatch] = useReducer(formReducer, defaultFormState, state => {\n    state.fieldsData = new Map<string, FieldState>();\n    state.configuration = {\n      validateOnChange,\n      validateOnBlur,\n      name,\n    };\n    return state;\n  });\n  const getFieldState = (name: string) => {\n    const fieldState = state.fieldsData.get(name);\n    if (!fieldState) throw 'field name is incorrect';\n    return fieldState;\n  };\n  const setFieldState = (name: string, newState: DeepPartial<FieldState>) => {\n    const mergedState = mergeState(getFieldState(name), newState);\n    const validatedState = fieldReducer(mergedState, { type: 'validate' });\n    dispatch({\n      type: 'setField',\n      fieldState: validatedState,\n    });\n  };\n  const setFieldValue = (name: string, value: string, configuration?: Partial<FieldConfiguration>) => {\n    const state = getFieldState(name);\n    const newFieldState = fieldReducer(state, {\n      value: value,\n      type: 'change',\n      configuration: { ...state.configuration, ...configuration, validateOnChange: true },\n    });\n    dispatch({\n      type: 'change',\n      fieldState: newFieldState,\n    });\n    dispatch({\n      type: 'validate',\n    });\n  };\n  const _onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    dispatch({ type: 'submit' });\n    if (state.valid) onSubmit(event, state.fieldsData);\n  };\n\n  const formProps = { name, onSubmit: _onSubmit };\n  const formContext = {\n    state,\n    setFieldState,\n    setFieldValue,\n    dispatch,\n  };\n  return <FormProvider value={formContext}>{children({ ...formContext, formProps })}</FormProvider>;\n};\n"],"names":["defaultFieldState","changed","blurred","dirty","pristine","filled","value","validity","valid","mergeState","prevState","newState","result","configuration","fieldReducer","state","action","type","validateOnChange","_action$configuration2","validate","_action$configuration4","handleChange","validateOnBlur","_action$configuration6","_action$configuration8","handleBlur","setDirty","_action$configuration10","handleValidation","Error","defaultFormState","invalid","submitted","fieldsData","Map","name","isValid","formReducer","handleSubmit","fieldState","set","forEach","fieldName","registerField","setField","unregisterField","FormContext","createContext","setFieldState","setFieldValue","dispatch","FormProvider","Provider","FormConsumer","Consumer","useFormContext","useContext","displayName","defaultValidity","getValidity","_ArkField","props","initialValue","onChange","onFocus","onBlur","children","formContext","inputRef","useRef","didMountRef","useEffect","current","_initialValue","toString","fieldProps","ref","event","formConfiguration","formState","get","_fieldProps$initialVa2","useMemo","React","onSubmit","useReducer","getFieldState","formProps","preventDefault","mergedState","validatedState","newFieldState"],"mappings":"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"}